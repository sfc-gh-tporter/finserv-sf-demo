create or replace database FINSERV_DEMO;

create or replace schema ADVISOR_WORKSPACE;

create or replace view CUSTOMER_OVERVIEW(
	CUSTOMER_ID,
	CUSTOMER_TYPE,
	FIRST_NAME,
	LAST_NAME,
	AGE,
	BIRTHDATE,
	RETIREMENT_DATE,
	RETIRED,
	STATE,
	PHONE_NUMBER,
	SSN,
	JOB_TITLE,
	SALARY,
	RETIREMENT_STAGE,
	RETIREMENT_YEAR,
	RETIREMENT_FUND,
	RISK_LEVEL,
	PERSONAL_WEALTH_PORTFOLIO
) as
select 
    -- Customer Information (automatically masked based on role and user)
    c.customer_id,
    c.customer_type,
    c.first_name,
    c.last_name,
    c.age,
    c.birthdate,
    c.retirement_date,
    c.retired,
    c.state,
    c.phone_number,
    c.ssn,
    c.job_title,
    c.salary,
        -- Calculated Fields for Advisor Insights
    case 
        when c.retired = true then 'Retired'
        when rp.years_to_fund_target <= 5 then 'Near Retirement'
        when rp.years_to_fund_target <= 15 then 'Mid Career'
        else 'Early Career'
    end as retirement_stage,
    -- Retirement Plan Details
    rp.retirement_year,
    rp.assigned_fund_name as retirement_fund,
    
    -- Risk and Portfolio Information
    c.risk_level_description as risk_level,
    pc.portfolio_description as personal_wealth_portfolio
 
        
    
from finserv_demo.raw_data.customers c
left join finserv_demo.map.customer_portfolio cp on c.customer_id = cp.customer_id and cp.active = true
left join finserv_demo.dims.dim_portfolio_composition pc on cp.portfolio_id = pc.portfolio_id
left join finserv_demo.map.customer_retirement_plans rp on c.customer_id = rp.customer_id
left join finserv_demo.dims.dim_retirement_plan_funds rpf on rp.assigned_fund_ticker = rpf.ticker;
create or replace schema DIMS;

create or replace TABLE DIM_ASSET_CLASS (
	ASSET_CLASS_HASH VARCHAR(16777216),
	ASSET_CLASS_DESCRIPTION VARCHAR(16777216),
	NUMBER_OF_SECURITIES NUMBER(38,0),
	SECTOR VARCHAR(16777216),
	MARKETCAP VARCHAR(16777216),
	GEO VARCHAR(16777216),
	SECURITY_TYPE VARCHAR(16777216)
);
create or replace TABLE DIM_DATE (
	BUSINESS_DATE DATE NOT NULL,
	IS_BUSINESS_DAY BOOLEAN DEFAULT TRUE,
	DAY_OF_WEEK VARCHAR(10),
	IS_HOLIDAY BOOLEAN DEFAULT FALSE,
	HOLIDAY_NAME VARCHAR(100),
	primary key (BUSINESS_DATE)
);
create or replace TABLE DIM_PORTFOLIO_COMPOSITION (
	PORTFOLIO_ID NUMBER(38,0),
	PORTFOLIO_DESCRIPTION VARCHAR(16777216),
	RISK_LEVEL NUMBER(38,0),
	RISK_LEVEL_DESCRIPTION VARCHAR(16777216),
	ASSET_CLASS_COMPOSITION VARCHAR(16777216)
);
create or replace TABLE DIM_RETIREMENT_PLAN_FUNDS (
	TICKER VARCHAR(16777216),
	FUND_NAME VARCHAR(16777216),
	TARGET_YEAR NUMBER(38,0),
	YEARS_TO_RETIREMENT NUMBER(38,0),
	BOND_PCT NUMBER(38,2),
	US_HIGH_CAP_PCT NUMBER(38,2),
	INTERNATIONAL_PCT NUMBER(38,2),
	US_MID_CAP_PCT NUMBER(38,2),
	EMERGING_MARKETS_PCT NUMBER(38,2),
	TOTAL_EQUITY_PCT NUMBER(38,17),
	TOTAL_BOND_PCT NUMBER(38,2)
);
create or replace TABLE DIM_SECURITIES (
	TICKER VARCHAR(16777216),
	NAME VARCHAR(16777216),
	EXCHANGE VARCHAR(16777216),
	SECTOR VARCHAR(16777216),
	MARKETCAP VARCHAR(16777216),
	GEO VARCHAR(16777216),
	ASSET_CLASS_HASH VARCHAR(16777216)
);
alter schema DIMS set tag TAGS.PUBLIC.BUSINESS_UNIT='Central_IT';

create or replace schema MAP;

create or replace TABLE ADVISOR_USERS (
	SNOWFLAKE_USERNAME VARCHAR(100),
	ADVISOR_ID NUMBER(38,0),
	ADVISOR_FIRST_NAME VARCHAR(100),
	ADVISOR_LAST_NAME VARCHAR(100)
);
create or replace TABLE CUSTOMER_ADVISOR (
	CUSTOMER_ID NUMBER(38,0),
	ADVISOR_ID NUMBER(38,0)
);
create or replace TABLE CUSTOMER_PORTFOLIO (
	CUSTOMER_ID NUMBER(38,0),
	PORTFOLIO_ID NUMBER(38,0),
	START_DATE DATE,
	END_DATE VARCHAR(16777216),
	ACTIVE BOOLEAN
);
create or replace TABLE CUSTOMER_RETIREMENT_PLANS (
	CUSTOMER_ID NUMBER(38,0),
	EMPLOYER_ID NUMBER(38,0),
	CUSTOMER_AGE NUMBER(38,0),
	RETIREMENT_YEAR NUMBER(38,0),
	IS_RETIRED BOOLEAN,
	ASSIGNED_FUND_TICKER VARCHAR(16777216),
	ASSIGNED_FUND_NAME VARCHAR(16777216),
	ASSIGNED_FUND_YEAR NUMBER(38,0),
	YEARS_TO_FUND_TARGET NUMBER(38,0),
	FUND_EQUITY_PCT NUMBER(38,16),
	FUND_BOND_PCT NUMBER(38,2)
);
create or replace schema PUBLIC;

create or replace schema RAW_DATA;

create or replace tag PII_HIGH COMMENT='Tag for HIGHLY SENSITIVE PII - SSNs';
create or replace tag PII_LOW COMMENT='Tag for LOW SENSITIVE PII data type- Age, Birthdate';
create or replace tag PII_MODERATE COMMENT='Tag for MODERATELY SENSITIVE PII - Address, Name, Phone Number'
;
create or replace TABLE ADVISORS (
	ADVISOR_ID NUMBER(38,0),
	FIRST_NAME VARCHAR(16777216) WITH TAG (FINSERV_DEMO.RAW_DATA.PII_MODERATE='name', SNOWFLAKE.CORE.PRIVACY_CATEGORY='IDENTIFIER', SNOWFLAKE.CORE.SEMANTIC_CATEGORY='NAME'),
	LAST_NAME VARCHAR(16777216) WITH TAG (FINSERV_DEMO.RAW_DATA.PII_MODERATE='name', SNOWFLAKE.CORE.PRIVACY_CATEGORY='IDENTIFIER', SNOWFLAKE.CORE.SEMANTIC_CATEGORY='NAME'),
	AGE NUMBER(38,0) WITH TAG (FINSERV_DEMO.RAW_DATA.PII_LOW='age', SNOWFLAKE.CORE.PRIVACY_CATEGORY='QUASI_IDENTIFIER', SNOWFLAKE.CORE.SEMANTIC_CATEGORY='AGE'),
	STREET_ADDRESS VARCHAR(16777216) WITH TAG (FINSERV_DEMO.RAW_DATA.PII_MODERATE='address', SNOWFLAKE.CORE.PRIVACY_CATEGORY='IDENTIFIER', SNOWFLAKE.CORE.SEMANTIC_CATEGORY='STREET_ADDRESS'),
	STATE VARCHAR(16777216) WITH TAG (SNOWFLAKE.CORE.PRIVACY_CATEGORY='QUASI_IDENTIFIER', SNOWFLAKE.CORE.SEMANTIC_CATEGORY='ADMINISTRATIVE_AREA_1'),
	ZIP_CODE NUMBER(38,0) WITH TAG (SNOWFLAKE.CORE.PRIVACY_CATEGORY='QUASI_IDENTIFIER', SNOWFLAKE.CORE.SEMANTIC_CATEGORY='POSTAL_CODE'),
	COUNTRY VARCHAR(16777216) WITH TAG (SNOWFLAKE.CORE.PRIVACY_CATEGORY='QUASI_IDENTIFIER', SNOWFLAKE.CORE.SEMANTIC_CATEGORY='COUNTRY'),
	PHONE_NUMBER VARCHAR(16777216) WITH TAG (FINSERV_DEMO.RAW_DATA.PII_MODERATE='phone', SNOWFLAKE.CORE.PRIVACY_CATEGORY='IDENTIFIER', SNOWFLAKE.CORE.SEMANTIC_CATEGORY='PHONE_NUMBER'),
	ADVISOR_START_DATE DATE
);
create or replace TABLE CASH_DEPOSITS (
	DEPOSIT_ID VARCHAR(16777216),
	CUSTOMER_ID NUMBER(38,0),
	TRANSACTION_DATE TIMESTAMP_NTZ(9),
	TICKER VARCHAR(16777216),
	DEPOSIT_AMOUNT NUMBER(38,2),
	ACCOUNT_TYPE_NAME VARCHAR(25),
	TRANSACTION_CATEGORY VARCHAR(16777216)
);
create or replace TABLE CUSTOMERS (
	CUSTOMER_ID NUMBER(38,0),
	FIRST_NAME VARCHAR(16777216) WITH TAG (FINSERV_DEMO.RAW_DATA.PII_MODERATE='name', SNOWFLAKE.CORE.PRIVACY_CATEGORY='IDENTIFIER', SNOWFLAKE.CORE.SEMANTIC_CATEGORY='NAME'),
	LAST_NAME VARCHAR(16777216) WITH TAG (FINSERV_DEMO.RAW_DATA.PII_MODERATE='name', SNOWFLAKE.CORE.PRIVACY_CATEGORY='IDENTIFIER', SNOWFLAKE.CORE.SEMANTIC_CATEGORY='NAME'),
	BIRTHDATE DATE WITH TAG (FINSERV_DEMO.RAW_DATA.PII_LOW='date', SNOWFLAKE.CORE.PRIVACY_CATEGORY='QUASI_IDENTIFIER', SNOWFLAKE.CORE.SEMANTIC_CATEGORY='DATE_OF_BIRTH'),
	AGE NUMBER(38,0) WITH TAG (FINSERV_DEMO.RAW_DATA.PII_LOW='age', SNOWFLAKE.CORE.PRIVACY_CATEGORY='QUASI_IDENTIFIER', SNOWFLAKE.CORE.SEMANTIC_CATEGORY='AGE'),
	STREET_ADDRESS VARCHAR(16777216) WITH TAG (FINSERV_DEMO.RAW_DATA.PII_MODERATE='address'),
	STATE VARCHAR(16777216) WITH TAG (SNOWFLAKE.CORE.PRIVACY_CATEGORY='QUASI_IDENTIFIER', SNOWFLAKE.CORE.SEMANTIC_CATEGORY='ADMINISTRATIVE_AREA_1'),
	ZIP_CODE NUMBER(38,0) WITH TAG (SNOWFLAKE.CORE.PRIVACY_CATEGORY='QUASI_IDENTIFIER', SNOWFLAKE.CORE.SEMANTIC_CATEGORY='POSTAL_CODE'),
	COUNTRY VARCHAR(16777216) WITH TAG (SNOWFLAKE.CORE.PRIVACY_CATEGORY='QUASI_IDENTIFIER', SNOWFLAKE.CORE.SEMANTIC_CATEGORY='COUNTRY'),
	PHONE_NUMBER VARCHAR(16777216) WITH TAG (FINSERV_DEMO.RAW_DATA.PII_MODERATE='phone', SNOWFLAKE.CORE.PRIVACY_CATEGORY='IDENTIFIER', SNOWFLAKE.CORE.SEMANTIC_CATEGORY='PHONE_NUMBER'),
	SSN VARCHAR(16777216) WITH TAG (FINSERV_DEMO.RAW_DATA.PII_HIGH='social_security_number', SNOWFLAKE.CORE.PRIVACY_CATEGORY='IDENTIFIER', SNOWFLAKE.CORE.SEMANTIC_CATEGORY='NATIONAL_IDENTIFIER'),
	EMPLOYEE_ID VARCHAR(16777216),
	EMPLOYER_ID NUMBER(38,0),
	HIRE_DATE DATE,
	START_DATE DATE,
	RETIREMENT_AGE NUMBER(38,0) WITH TAG (FINSERV_DEMO.RAW_DATA.PII_LOW='age', SNOWFLAKE.CORE.PRIVACY_CATEGORY='QUASI_IDENTIFIER', SNOWFLAKE.CORE.SEMANTIC_CATEGORY='AGE'),
	RETIREMENT_DATE DATE,
	RETIRED BOOLEAN,
	REPORTED_RISK_LEVEL NUMBER(38,0),
	RISK_LEVEL_DESCRIPTION VARCHAR(16777216),
	SALARY NUMBER(38,2) WITH TAG (SNOWFLAKE.CORE.PRIVACY_CATEGORY='SENSITIVE', SNOWFLAKE.CORE.SEMANTIC_CATEGORY='SALARY'),
	JOB_TITLE VARCHAR(16777216) WITH TAG (SNOWFLAKE.CORE.PRIVACY_CATEGORY='QUASI_IDENTIFIER', SNOWFLAKE.CORE.SEMANTIC_CATEGORY='OCCUPATION'),
	DEPARTMENT VARCHAR(16777216),
	CUSTOMER_TYPE VARCHAR(16777216)
) WITH ROW ACCESS POLICY FINSERV_DEMO.RAW_DATA.CUSTOMER_ADVISOR_POLICY ON (CUSTOMER_ID)
;
create or replace TABLE EMPLOYERS (
	EMPLOYER_ID NUMBER(38,0),
	COMPANY_NAME VARCHAR(16777216),
	INDUSTRY VARCHAR(16777216),
	EMPLOYEE_COUNT NUMBER(38,0),
	SIZE_CATEGORY VARCHAR(16777216)
);
create or replace TABLE RETIREMENT_CONTRIBUTIONS (
	TRANSACTION_DATE TIMESTAMP_NTZ(9),
	SHARE_AMOUNT NUMBER(38,2),
	TRADE_PRICE NUMBER(38,2),
	ACCOUNT_TYPE_NAME VARCHAR(16777216),
	TOTAL_TRADE_AMOUNT NUMBER(38,2),
	TICKER VARCHAR(16777216),
	TRANSACTION_CATEGORY VARCHAR(16777216),
	CUSTOMER_ID NUMBER(38,0),
	CONTRIBUTION_SCHEDULE VARCHAR(16777216)
);
create or replace TABLE SECURITY_TRADES (
	TRANSACTION_DATE DATE,
	TRANSACTION_ID VARCHAR(16777216),
	TRANSACTION_PAYLOAD VARIANT
);
CREATE OR REPLACE FILE FORMAT CSV_INGEST_FF
	RECORD_DELIMITER = 'n'
	FILE_EXTENSION = 'csv'
	ESCAPE_UNENCLOSED_FIELD = 'NONE'
	FIELD_OPTIONALLY_ENCLOSED_BY = '\"'
;
CREATE OR REPLACE FILE FORMAT PARQUET_FORMAT
	TYPE = PARQUET
	NULL_IF = ()
;
create or replace pipe CASH_DEPOSITS_PIPE auto_ingest=true as COPY INTO cash_deposits FROM @cash_deposits_inbound_stage;
create or replace pipe SECURITY_TRADES_PIPE auto_ingest=true as COPY INTO finserv_demo.raw_data.security_trades (transaction_date,transaction_id,transaction_payload) 
    FROM (SELECT stg.$1::date
                ,stg.$2::string 
                ,parse_json(stg.$3)
          FROM @finserv_demo.raw_data.security_trades_inbound_stage stg);
create or replace masking policy AGE_MASK as (VAL NUMBER(38,0)) 
returns NUMBER(38,0) ->
case 
        when current_role() in ('CLIENT_ADVISOR_RL','BUSINESS_ANALYST_RL') then val --useful for advisors and analysts
        when current_role() in ('DATA_ENGINEER_RL','FISERV_ADMIN','DATA_STEWARD') then null
        else val -- Else handles system roles (Accountadmin, Sysadmin) --For demo purposes we are not masking them
    end
;
create or replace row access policy CUSTOMER_ADVISOR_POLICY as (CUSTOMER_ID NUMBER(38,0)) 
returns BOOLEAN ->
case
        when current_role() in ('DATA_STEWARD', 'DATA_ENGINEER_RL', 'BUSINESS_ANALYST_RL', 'FINSERV_ADMIN') then true
        when current_role() = 'CLIENT_ADVISOR_RL' then 
            exists (
                select 1 from finserv_demo.map.customer_advisor ca
                inner join finserv_demo.map.advisor_users au on ca.advisor_id = au.advisor_id
                where ca.customer_id = customer_id 
                and au.snowflake_username = current_user()
            )
        else true
    end
;
create or replace masking policy DATE_MASK as (VAL DATE) 
returns DATE ->
case 
        when current_role() in ('CLIENT_ADVISOR_RL','BUSINESS_ANALYST_RL') then val --useful for advisors and analysts
        when current_role() in ('DATA_ENGINEER_RL','FISERV_ADMIN','DATA_STEWARD') then null
        else val -- Else handles system roles (Accountadmin, Sysadmin) --For demo purposes we are not masking them
    end
;
create or replace masking policy SSN_MASK as (VAL VARCHAR) 
returns VARCHAR ->
case 
        when current_role() in ('DATA_ENGINEER_RL', 'BUSINESS_ANALYST_RL','DATA_STEWARD','FISERV_ADMIN') then '*** Redacted ***'
        when current_role() = 'CLIENT_ADVISOR_RL' then regexp_replace(val, '^.{3}-.{2}', '***-**')
        else val
    end
;
create or replace masking policy VARCHAR_MODERATE as (VAL VARCHAR) 
returns VARCHAR ->
case 
        when current_role() in ('CLIENT_ADVISOR_RL') then val
        when current_role() in ('DATA_ENGINEER_RL', 'BUSINESS_ANALYST_RL','FISERV_ADMIN','DATA_STEWARD') then '*** Redacted ***'
        else val -- Else handels system roles (Accountadmin, Sysadmin) --For demo purposes we are not masking them
    end
COMMENT='VarChar Masking Policy for moderately senstive data.'
;
alter schema RAW_DATA set tag TAGS.PUBLIC.BUSINESS_UNIT='Central_IT';
